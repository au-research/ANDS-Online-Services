##############################################################
#
# This is based on the template LDA configuration for a SISSvoc service
# Reference - <https://www.seegrid.csiro.au/wiki/Siss/SISSvoc30Specification>
#
# Copyright (c) CSIRO 2012
# Re-use permitted according to Creative Commons Attribution 3.0 Australia (CC BY 3.0) 
# see <http://creativecommons.org/licenses/by/3.0/au/>
#
# Contact: Simon J D Cox 
#          CSIRO Earth Science and Resource Engineering
#          PO Box 1130
#          Bentley
#          WA 6102
#          Australia
#          simon.cox@csiro.au
#
# The configuration must be customized for each vocabulary
# Sections that must be customized are bracketted by rows of hashes similar to the line below which ends this comment block
#
##############################################################

## Common prefixes - don't change these.
@prefix api:     <http://purl.org/linked-data/api/vocab#> .
@prefix dc:      <http://purl.org/dc/elements/1.1/> .
@prefix dcterms: <http://purl.org/dc/terms/> .
@prefix elda:    <http://www.epimorphics.com/vocabularies/lda#> .
@prefix foaf:    <http://xmlns.com/foaf/0.1/> .
@prefix owl:     <http://def.seegrid.csiro.au/isotc211//owl#> .
@prefix rdf:     <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix rdfs:    <http://www.w3.org/2000/01/rdf-schema#> .
@prefix skos:    <http://www.w3.org/2004/02/skos/core#> .
@prefix svoc:    <http://www.seegrid.csiro.au/siss/voc/> .
@prefix xsd:     <http://www.w3.org/2001/XMLSchema#> .

##############################################################
##
## TODO: deployer to make changes here
## other namespaces that appear in this vocabulary 

@prefix basic:   <http://def.seegrid.csiro.au/isotc211/iso19103/2005/basictype/> .
@prefix geo:     <http://def.seegrid.csiro.au/ogc/geosparql/> .
@prefix gm:      <http://def.seegrid.csiro.au/isotc211/iso19107/2003/geometry/> .
@prefix gml31:   <http://def.seegrid.csiro.au/ogc/dataType/OGC-GML/3.1/> .
@prefix gml32:   <http://def.seegrid.csiro.au/ogc/dataType/OGC-GML/3.2/> .
@prefix gtrs:    <http://resource.geosciml.org/schema/cgi/trs/3.0/> .
@prefix gts:     <http://resource.geosciml.org/schema/cgi/gts/3.0/> .
@prefix isc:     <http://resource.geosciml.org/classifier/ics/ischart/> .
@prefix ogcsf:   <http://def.seegrid.csiro.au/ogc/dataType/OGC-SF/1.0/> .
@prefix sam:     <http://def.seegrid.csiro.au/isotc211/iso19156/2011/sampling/> .
@prefix tm:      <http://def.seegrid.csiro.au/isotc211/iso19108/2006/temporalobject/> .
@prefix trs:     <http://def.seegrid.csiro.au/isotc211/iso19108/2006/temporalreferencesystem/> .

## end of TODO:
##############################################################


##############################################################
svoc:anzsrc-for a api:API 
	; api:maxPageSize "200"
	; api:defaultPageSize "200" 
	
##############################################################
##
## TODO: deployer to make changes here
## change "ashtml.xsl" to the path for the result stylesheet for this API
## change sissvoc to find the images and css for the stylesheet 

	; api:defaultFormatter [ 
			a api:XsltFormatter
			; api:name 'html'
			; api:stylesheet 'xsltsheets/timescalehtml.xsl' 
			; api:mimeType 'text/html' 
	]
	; api:variable
		[api:name "activeImageBase"; api:value "/sissvoc/images/green/16x16"]
		, [api:name "inactiveImageBase"; api:value "/sissvoc/images/grey/16x16"]
		, [api:name "_resourceRoot"; api:value "/sissvoc/"]
		, [api:name "webapp"; api:value "/sissvoc"]	

## end of TODO:
##############################################################

	; api:endpoint
		svoc:URIEndpoint ,
		# Ben's modifications <ben.greenwood@ands.org.au>
		svoc:conceptByLabelNotationURIEndpoint ,
		svoc:topConceptsByConceptSchemeEndpoint ,
		svoc:allNarrowerThanURIEndpoint ,
		svoc:allBroaderThanURIEndpoint ,

		svoc:conceptSchemeEndpoint , 		
		svoc:conceptCollectionEndpoint , 	
		svoc:conceptListEndpoint , 
		svoc:conceptByLabelEndpoint , 
		svoc:conceptByLabelLooseEndpoint ,
		svoc:conceptByNotationLooseEndpoint,
		svoc:conceptByNotationEndpoint , 
		svoc:broaderThanURIEndpoint ,
		svoc:narrowerThanURIEndpoint ,
		svoc:broaderTransitiveThanURIEndpoint ,
		svoc:narrowerTransitiveThanURIEndpoint , 
		svoc:broaderByLabelEndpoint ,
		svoc:narrowerByLabelEndpoint ,
		svoc:broaderTransitiveByLabelEndpoint ,
		svoc:narrowerTransitiveByLabelEndpoint 
	; api:defaultViewer api:describeViewer 
	; rdfs:label "ANZSRC_FOR VOCABULARY SERVICE"@en 
		
# set the SPARQL endpoint

	; api:sparqlEndpoint <http://devl.ands.org.au:8080/openrdf-sesame/repositories/anzsrc-for> 
	.
	
## end of TODO:
##############################################################

##############################################################
##
## TODO: deployer to make changes here
## SPARQL 1.1 endpoints ONLY!
## remove this if the endpoint does not support SPARQL 1.1

<http://devl.ands.org.au:8080/openrdf-sesame/repositories/anzsrc-for> elda:supportsNestedSelect true .

## end of TODO:
##############################################################

#VIEWERS

svoc:viewerNone a api:Viewer 
    ; api:name "none"
    .

svoc:basicConceptSchemeViewer a api:Viewer 
    ; api:name "conceptScheme" 
    ; api:property rdfs:label
    .

svoc:basicCollectionViewer a api:Viewer 
    ; api:name "collection" 
    ; api:property rdfs:label
    .

svoc:basicConceptViewer a api:Viewer 
    ; api:name "concept" 
    ; api:property skos:prefLabel, skos:notation, skos:broader
    .

################
##
## LDA documentation is unclear about syntax for api_template, and in particular how to pass in the URI for the item
##
#svoc:labelledDescribeConceptViewer a api:Viewer
#    ; api:name "conceptFull"
#    ; api:template " CONSTRUCT { ?item ?p ?o . ?o skos:prefLabel ?l } WHERE { ?item ?p ?o ; rdf:type skos:Concept . OPTIONAL { ?o skos:prefLabel ?l } } "
#    .
#
##
################

#ENDPOINTS 

## 0. This is the basic "tell me what you know about the resource identified by this URI" request. 
svoc:URIEndpoint a api:ItemEndpoint
		; rdfs:comment "Describe this resource" 
		; api:uriTemplate  "/anzsrc-for/resource?uri={URI}" 
		; api:exampleRequestPath  "/anzsrc-for/resource?uri=http://resource.geosciml.org/classifier/ics/ischart/Furongian"
		; api:itemTemplate  "{URI}"
		; api:defaultViewer  api:labelledDescribeViewer
		; api:viewer  api:basicViewer,api:describeViewer,api:labelledDescribeViewer
#		; api:viewer  svoc:labelledDescribeConceptViewer
		.

## 1. List of concept schemes - basic-view 
svoc:conceptSchemeEndpoint a api:ListEndpoint 
		; rdfs:comment "List all concept-schemes" 
		; api:uriTemplate  "/anzsrc-for/conceptscheme" 
		; api:exampleRequestPath  "/anzsrc-for/conceptscheme"
		; api:selector [	api:where " ?item a skos:ConceptScheme . " ] 
		; api:defaultViewer  svoc:basicConceptSchemeViewer
		; api:viewer  api:basicViewer,svoc:basicConceptSchemeViewer 
		.
		
## 2. List of concept collections - basic-view 	 
svoc:conceptCollectionEndpoint a api:ListEndpoint 
		; rdfs:comment "List all concept collections" 
		; api:uriTemplate  "/anzsrc-for/collection" 
		; api:exampleRequestPath  "/anzsrc-for/collection"
		; api:selector [ api:where " ?item a ?type . FILTER ( ?type = skos:Collection || ?type = skos:OrderedCollection ) " ] 
		; api:defaultViewer  svoc:basicCollectionViewer
		; api:viewer  api:basicViewer,svoc:basicCollectionViewer 
		.
		
## 3. List of concepts - basic-view 
svoc:conceptListEndpoint a api:ListEndpoint 
		; rdfs:comment "List all concepts" 
		; api:uriTemplate  "/anzsrc-for/concept" 
		; api:exampleRequestPath  "/anzsrc-for/concept"
		; api:selector [ 
				api:where " ?item a skos:Concept . " 
		] 
		; api:defaultViewer svoc:basicConceptViewer 
		; api:viewer  api:basicViewer,svoc:basicConceptViewer 
		.

svoc:topConceptsByConceptSchemeEndpoint a api:ListEndpoint
		; rdfs:comment "List all concepts which are topConcepts of the vocabulary"
                ; api:uriTemplate  "/anzsrc-for/topConcepts"
                ; api:exampleRequestPath  "/anzsrc-for/topConcepts"
                ; api:selector [
                                api:where " ?item a skos:Concept . ?item skos:topConceptOf ?l . "
                ]
                ; api:defaultViewer svoc:basicConceptViewer
                ; api:viewer  api:basicViewer,svoc:basicConceptViewer
                .
		
## 4. List of concepts where a label matches the text, in English 
svoc:conceptByLabelEndpoint a api:ListEndpoint 
		; rdfs:comment "List concepts where a skos label property has exact match to text, in English"
		; api:uriTemplate  "/anzsrc-for/concept?anylabel={text}" 
		; api:exampleRequestPath  "/anzsrc-for/concept?anylabel=MATHEMATICAL%20SCIENCES" 
		; api:selector [
				api:where " ?item a skos:Concept . ?item ?label ?l . FILTER ( ?label = skos:prefLabel || ?label = skos:altLabel ) FILTER ( ?l = ?text ) "
		] 		
		; api:defaultViewer svoc:basicConceptViewer 
		; api:viewer  api:basicViewer,svoc:basicConceptViewer 
		.
	
svoc:conceptByLabelNotationURIEndpoint a api:ListEndpoint
                 ; rdfs:comment "List concepts where a skos label/notation or RDF URI property contains this text, case-insensitive"
                 ; api:uriTemplate  "/anzsrc-for/concept?anycontains={text}"
                 ; api:exampleRequestPath  "/anzsrc-for/concept?anycontains=01"
                 ; api:selector [
                                 api:where " ?item a skos:Concept . ?item ?label ?l . FILTER ( ((?label = skos:prefLabel || ?label = skos:altLabel ) && regex( str(?l) , ?text , 'i' )   ) || ((?label= skos:notation ) && str(?l) = ?text ) || ( str(?item) = ?text && (?label= skos:notation ))) "
                 ]
                 ; api:defaultViewer svoc:basicConceptViewer
                 ; api:viewer  api:basicViewer,svoc:basicConceptViewer
                 .
	
## 4a. List of concepts where a label contains the text, any language, case-insensitive 
svoc:conceptByLabelLooseEndpoint a api:ListEndpoint 
		; rdfs:comment "List concepts where a skos label property contains this text, case-insensitive"
		; api:uriTemplate  "/anzsrc-for/concept?labelcontains={text}" 
		; api:exampleRequestPath  "/anzsrc-for/concept?labelcontains=cambrian" 
		; api:selector [
				api:where " ?item a skos:Concept . ?item ?label ?l . FILTER ( ?label = skos:prefLabel || ?label = skos:altLabel ) FILTER regex( str(?l) , ?text , 'i' ) "
		] 		
		; api:defaultViewer svoc:basicConceptViewer 
		; api:viewer  api:basicViewer,svoc:basicConceptViewer 
		.

## 4b. List of concepts where a notation contains the text, any language, case-insensitive
svoc:conceptByNotationLooseEndpoint a api:ListEndpoint
                ; rdfs:comment "List concepts where a skos notation property contains this text, case-insensitive"
                ; api:uriTemplate "/anzsrc-for/concept?notationcontains={text}"
                ; api:exampleRequestPath "/anzsrc-for/concept?notationcontains=cambrian"
                ; api:selector [
                                api:where " ?item a skos:Concept . ?item ?label ?l . FILTER ( ?label = skos:notation ) FILTER regex( str(?l) , ?text , 'i' ) "
                ]
                ; api:defaultViewer svoc:basicConceptViewer
                ; api:viewer  api:basicViewer,svoc:basicConceptViewer
                .


## 5. List of concepts where the skos:notation matches the quoted text  	 
svoc:conceptByNotationEndpoint a api:ListEndpoint 
		; rdfs:comment "List concepts where notation property has exact match to this string"
		; api:uriTemplate  "/anzsrc-for/concept?notation={nn}" 
		; api:exampleRequestPath  "/anzsrc-for/concept?notation=a1.1.3.6"
		; api:selector [ 
				api:where " ?item a skos:Concept . ?item skos:notation ?n . FILTER ( ?n = ?nn ) "
		]
		; api:defaultViewer svoc:basicConceptViewer 
		; api:viewer  api:basicViewer,svoc:basicConceptViewer 
		.
		
		
## 6. List of concepts broader than the one identified by this URI 
svoc:broaderThanURIEndpoint a api:ListEndpoint 
		; rdfs:comment "List concepts broader than the one identified by this URI"
		; api:uriTemplate  "/anzsrc-for/concept/broader?uri={baseConcept}" 
		; api:exampleRequestPath  "/anzsrc-for/concept/broader?uri=http://resource.geosciml.org/classifier/ics/ischart/Cambrian"
		; api:variable [ api:name "baseConcept"; api:type rdfs:Resource ] 
		; api:selector [ 
				api:where " ?baseConcept skos:broader ?item . "
		]
		; api:defaultViewer svoc:basicConceptViewer 
		; api:viewer  api:basicViewer,svoc:basicConceptViewer 
		.

## 7. List of concepts narrower than the one identified by this URI 
svoc:narrowerThanURIEndpoint a api:ListEndpoint 
		; rdfs:comment "List concepts narrower than the one identified by this URI"
		; api:uriTemplate  "/anzsrc-for/concept/narrower?uri={baseConcept}" 
		; api:exampleRequestPath  "/anzsrc-for/concept/narrower?uri=http://resource.geosciml.org/classifier/ics/ischart/Cambrian"
		; api:variable  [ api:name "baseConcept"; api:type rdfs:Resource ] 
		; api:selector [ 
				api:where " ?baseConcept skos:narrower ?item . "
		]
		; api:defaultViewer svoc:basicConceptViewer 
		; api:viewer  api:basicViewer,svoc:basicConceptViewer 
		.

## 8. List of concepts broaderTransitive than the one identified by this URI 
svoc:broaderTransitiveThanURIEndpoint a api:ListEndpoint 
		; rdfs:comment "List concepts broaderTransitive than the one identified by this URI"
		; api:uriTemplate  "/anzsrc-for/concept/broaderTransitive?uri={baseConcept}" 
		; api:exampleRequestPath  "/anzsrc-for/concept/broaderTransitive?uri=http://resource.geosciml.org/classifier/ics/ischart/Cambrian"
		; api:variable  [ api:name "baseConcept"; api:type rdfs:Resource ] 
		; api:selector [ 
				api:where " ?baseConcept skos:broaderTransitive ?item . "
		]
		; api:defaultViewer svoc:basicConceptViewer 
		; api:viewer  api:basicViewer,svoc:basicConceptViewer 
		.

## 9. List of concepts narrowerTransitive than the one identified by this URI 
svoc:narrowerTransitiveThanURIEndpoint a api:ListEndpoint 
		; rdfs:comment "List concepts narrowerTransitive than the one identified by this URI"
		; api:uriTemplate  "/anzsrc-for/concept/narrowerTransitive?uri={baseConcept}" 
		; api:exampleRequestPath  "/anzsrc-for/concept/narrowerTransitive?uri=http://resource.geosciml.org/classifier/ics/ischart/Cambrian"
		; api:variable  [ api:name "baseConcept"; api:type rdfs:Resource ] 
		; api:selector [ 
				api:where " ?baseConcept skos:narrowerTransitive ?item . "
		]
		; api:defaultViewer svoc:basicConceptViewer 
		; api:viewer  api:basicViewer,svoc:basicConceptViewer 
		.

svoc:allBroaderThanURIEndpoint a api:ListEndpoint
		; rdfs:comment "Recursively list concepts narrower than the one identified by this URI"
                ; api:uriTemplate  "/anzsrc-for/allBroader?uri={baseConcept}"
                ; api:exampleRequestPath  "/anzsrc-for/allBroader?uri=http://resource.geosciml.org/classifier/ics/ischart/Cambrian"
		; api:variable  [ api:name "baseConcept"; api:type rdfs:Resource ]
                ; api:selector [ # logically unintuitive, note order of subject, object
                                api:where " ?item skos:narrower+ ?baseConcept "
                ]
                ; api:defaultViewer svoc:basicConceptViewer
                ; api:viewer  api:basicViewer,svoc:basicConceptViewer
               	.

svoc:allNarrowerThanURIEndpoint a api:ListEndpoint
		; rdfs:comment "Recursively list concepts narrower than the one identified by this URI"
                ; api:uriTemplate  "/anzsrc-for/allNarrower?uri={baseConcept}"
                ; api:exampleRequestPath  "/anzsrc-for/allNarrower?uri=http://resource.geosciml.org/classifier/ics/ischart/Cambrian"
		; api:variable  [ api:name "baseConcept"; api:type rdfs:Resource ]
                ; api:selector [ # logically unintuitive, note order of subject, object
                                api:where " ?item skos:broader+ ?baseConcept "
                ]
                ; api:defaultViewer svoc:basicConceptViewer
                ; api:viewer  api:basicViewer,svoc:basicConceptViewer
               	.


## 10. List of concepts broader than the one where a label matches the text, in English 
svoc:broaderByLabelEndpoint a api:ListEndpoint 
		; rdfs:comment "List concepts broader than any concepts with this exact label"
		; api:uriTemplate  "/anzsrc-for/concept/broader?anylabel={text}" 
		; api:exampleRequestPath  "/anzsrc-for/concept/broader?anylabel=Cambrian" 
		; api:selector [
				api:where " ?i0 skos:broader ?item . ?i0 ?label ?l . FILTER ( ?label = rdfs:label || ?label = skos:prefLabel || ?label = skos:altLabel ) FILTER ( ?l = ?text@en ) "
		] 		
		; api:defaultViewer svoc:basicConceptViewer 
		; api:viewer  api:basicViewer,svoc:basicConceptViewer 
		.
		
## 11. List of concepts narrower than the one where a label matches the text, in English 
svoc:narrowerByLabelEndpoint a api:ListEndpoint 
		; rdfs:comment "List concepts narrower than any concepts with this exact label"
		; api:uriTemplate  "/anzsrc-for/concept/narrower?anylabel={text}" 
		; api:exampleRequestPath  "/anzsrc-for/concept/narrower?anylabel=Cambrian" 
		; api:selector [
				api:where " ?i0 skos:narrower ?item . ?i0 ?label ?l . FILTER ( ?label = rdfs:label || ?label = skos:prefLabel || ?label = skos:altLabel ) FILTER ( ?l = ?text@en ) "
		] 		
		; api:defaultViewer svoc:basicConceptViewer 
		; api:viewer  api:basicViewer,svoc:basicConceptViewer 
		.

## 12. List of concepts broaderTransitive than the one where a label matches the text, in English 
svoc:broaderTransitiveByLabelEndpoint a api:ListEndpoint 
		; rdfs:comment "List concepts broaderTransitive than any concepts with this exact label"
		; api:uriTemplate  "/anzsrc-for/concept/broaderTransitive?anylabel={text}" 
		; api:exampleRequestPath  "/anzsrc-for/concept/broaderTransitive?anylabel=Cambrian" 
		; api:selector [
				api:where " ?i0 skos:broaderTransitive ?item . ?i0 ?label ?l . FILTER ( ?label = rdfs:label || ?label = skos:prefLabel || ?label = skos:altLabel ) FILTER ( ?l = ?text@en ) "
		] 		
		; api:defaultViewer svoc:basicConceptViewer 
		; api:viewer  api:basicViewer,svoc:basicConceptViewer 
		.
		
## 13. List of concepts narrowerTransitive than the one where a label matches the text, in English 
svoc:narrowerTransitiveByLabelEndpoint a api:ListEndpoint 
		; rdfs:comment "List concepts narrowerTransitive than any concepts with this exact label"
		; api:uriTemplate  "/anzsrc-for/concept/narrowerTransitive?label={text}" 
		; api:exampleRequestPath  "/anzsrc-for/concept/narrowerTransitive?anylabel=Cambrian" 
		; api:selector [
				api:where " ?i0 skos:narrowerTransitive ?item . ?i0 ?label ?l . FILTER ( ?label = rdfs:label || ?label = skos:prefLabel || ?label = skos:altLabel ) FILTER ( ?l = ?text@en ) "
		] 		
		; api:defaultViewer svoc:basicConceptViewer 
		; api:viewer  api:basicViewer,svoc:basicConceptViewer 
		.

#
# VOCABULARY
#
# The vocabulary declarations say which properties can be used in queries
# and by what short name those properties are known. If property P with short
# name Q has range type T, then a query parameters Q=V is translated to
# a WHERE clause fragment ?item P V' where V' is a literal which is V
# with type T. This is especially important for numbers and booleans.
# 

## RDF
rdf:type
    api:label "type" ; 
    rdfs:range rdfs:Class .
  
## RDFS
rdfs:label 
    api:label "label" ; 
    api:structured "true"^^xsd:boolean;
    a           rdf:Property .

rdfs:comment 
    api:label "comment" ; 
    api:structured "true"^^xsd:boolean;
    a           rdf:Property .

## SKOS
skos:Concept
		api:label "Concept" ;
		a         rdfs:Class .
             
skos:ConceptScheme 
		api:label "ConceptScheme" ;
		a         rdfs:Class .

skos:topConceptOf
		api:label "topConceptOf" ;
		rdfs:range      skos:ConceptScheme .
            
skos:hasTopConcept
		api:label "hasTopConcept" ; 
		api:multiValued true ;
		rdfs:range      skos:Concept .
            
skos:inScheme
		api:label "inScheme" ; 
		rdfs:domain	skos:Concept ;
		rdfs:range      skos:ConceptScheme .

skos:member
		api:label "member" ; 
		api:multiValued true ;
		rdfs:domain	skos:Collection ;
		rdfs:range      skos:Concept .

skos:memberList
		api:label "memberList" ; 
		rdfs:domain	skos:OrderedCollection ;
		rdfs:range      skos:Concept .

skos:prefLabel
		api:label "prefLabel" ;
		api:structured "true"^^xsd:boolean;
		a           rdf:Property .
            
skos:altLabel
		api:label "altLabel" ; 
		api:multiValued true ;
		api:structured "true"^^xsd:boolean;
		a         rdf:Property  .
            
skos:notation
		a owl:DatatypeProperty; 
		api:label "notation"  .

skos:semanticRelation
		api:label "semanticRelation" ; 
		api:multiValued true ;
		rdfs:range      skos:Concept .

skos:related
		api:label "related" ; 
		api:multiValued true ;
		rdfs:range      skos:Concept .

skos:broader
		api:label "broader" ; 
		api:multiValued true ;
		rdfs:range      skos:Concept .

skos:narrower
		api:label "narrower" ; 
		api:multiValued true ;
		rdfs:range      skos:Concept .

skos:broaderTransitive
		api:label "broaderTransitive" ; 
		api:multiValued true ;
		rdfs:range      skos:Concept .

skos:narrowerTransitive
		api:label "narrowerTransitive" ; 
		api:multiValued true ;
		rdfs:range      skos:Concept .
            
skos:mappingRelation
		api:label "mappingRelation" ; 
		api:multiValued true ;
		rdfs:range      skos:Concept .

skos:closeMatch
		api:label "closeMatch" ; 
		api:multiValued true ;
		rdfs:range      skos:Concept .

skos:exactMatch
		api:label "exactMatch" ; 
		api:multiValued true ;
		rdfs:range      skos:Concept .

skos:broadMatch
		api:label "broadMatch" ; 
		api:multiValued true ;
		rdfs:range      skos:Concept .

skos:narrowMatch 
		api:label "narrowMatch " ; 
		api:multiValued true ;
		rdfs:range      skos:Concept .

skos:relatedMatch 
		api:label "relatedMatch " ; 
		api:multiValued true ;
		rdfs:range      skos:Concept .


